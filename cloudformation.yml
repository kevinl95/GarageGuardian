AWSTemplateFormatVersion: "2010-09-09"
Description: Garage Guardian - AWS CloudFormation Stack

Parameters:
  TuyaAPIKey:
    Type: String
    Description: The Tuya API Key
  TuyaAPISecret:
    Type: String
    Description: The Tuya API Secret
    NoEcho: true # Hides the API secret from logs and output
  TuyaDeviceID:
    Type: String
    Description: The Tuya Device ID to monitor

Resources:
  GarageGuardianSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: GarageGuardianCredentials
      Description: Tuya API credentials for Garage Guardian
      SecretString: !Sub |
        {
          "apiKey": "${TuyaAPIKey}",
          "apiSecret": "${TuyaAPISecret}",
          "deviceId": "${TuyaDeviceID}"
        }

  GarageGuardianDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GarageGuardianStatus
      AttributeDefinitions:
        - AttributeName: DeviceID
          AttributeType: S
      KeySchema:
        - AttributeName: DeviceID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GarageGuardianApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GarageGuardianAPI

  GarageGuardianApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GarageGuardianApiGateway.RootResourceId
      PathPart: status
      RestApiId: !Ref GarageGuardianApiGateway

  GarageGuardianApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref GarageGuardianApiGatewayResource
      RestApiId: !Ref GarageGuardianApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GarageGuardianApiGatewayLambda.Arn}/invocations"

  GarageGuardianApiGatewayLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GarageGuardianApiGatewayHandler
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GarageGuardianApiGatewayLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('GarageGuardianStatus')

              device_id = event.get('queryStringParameters', {}).get('deviceId', 'unknown')

              response = table.get_item(Key={'DeviceID': device_id})
              status = response.get('Item', {}).get('Status', 'Unknown')

              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'application/json'},
                  'body': json.dumps({'deviceId': device_id, 'status': status})
              }

  GarageGuardianApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GarageGuardianApiGatewayLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GarageGuardianApiGateway}/*/GET/status"

  GarageGuardianApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GarageGuardianApiGatewayMethod
    Properties:
      RestApiId: !Ref GarageGuardianApiGateway
      StageName: prod

  GarageGuardianLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GarageGuardianQuery
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GarageGuardianLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          import time
          import hashlib
          import hmac

          def lambda_handler(event, context):
              secrets_client = boto3.client('secretsmanager')
              secret_name = "GarageGuardianCredentials"
              secret = secrets_client.get_secret_value(SecretId=secret_name)
              credentials = json.loads(secret['SecretString'])

              api_key = credentials['apiKey']
              api_secret = credentials['apiSecret']
              device_id = credentials['deviceId']

              timestamp = str(int(time.time() * 1000))  # Tuya API requires timestamp in milliseconds

              # Generate the sign
              sign_str = f"{api_key}{timestamp}"
              sign = hmac.new(api_secret.encode('utf-8'), sign_str.encode('utf-8'), hashlib.sha256).hexdigest().upper()

              # Tuya API URL for querying device state
              api_url = f"https://openapi.tuyaus.com/v1.0/devices/{device_id}/status"
              headers = {
                  "client_id": api_key,
                  "sign": sign,
                  "t": timestamp,
                  "sign_method": "HMAC-SHA256",
                  "Content-Type": "application/json"
              }

              response = requests.get(api_url, headers=headers)
              status = response.json()

              return {
                  'statusCode': response.status_code,
                  'body': json.dumps(status)
              }

  GarageGuardianEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Arn: !GetAtt GarageGuardianLambda.Arn
          Id: GarageGuardianLambdaTarget

  GarageGuardianLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GarageGuardianLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GarageGuardianEventBridgeRule.Arn

  GarageGuardianHTMLLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GarageGuardianHTMLHandler
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GarageGuardianApiGatewayLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              html_content = """
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Garage Guardian</title>
                  <style>
                      body {
                          font-family: Arial, sans-serif;
                          text-align: center;
                          margin: 0;
                          padding: 0;
                          background-color: #f4f4f4;
                      }
                      header {
                          background: #333;
                          color: white;
                          padding: 20px 0;
                      }
                      .status {
                          margin-top: 50px;
                          padding: 20px;
                          background: white;
                          border-radius: 10px;
                          box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                          display: inline-block;
                      }
                      .status h2 {
                          margin: 0;
                          font-size: 24px;
                          color: #333;
                      }
                      .status p {
                          font-size: 18px;
                          color: #666;
                      }
                      .status.open {
                          color: green;
                      }
                      .status.closed {
                          color: red;
                      }
                  </style>
                  <link rel="manifest" href="data:application/manifest+json,${encodeURIComponent(JSON.stringify({
                      name: "Garage Guardian",
                      short_name: "GarageGuardian",
                      description: "Check if your garage door is open from anywhere using a smart lightbulb!",
                      start_url: "/",
                      display: "standalone",
                      background_color: "#ffffff",
                      theme_color: "#333333",
                      icons: [
                          {
                              src: "pwa-192x192.png",
                              sizes: "192x192",
                              type: "image/png"
                          },
                          {
                              src: "pwa-512x512.png",
                              sizes: "512x512",
                              type: "image/png"
                          }
                      ]
                  }))}">
              </head>
              <body>
                  <header>
                      <h1>Garage Guardian</h1>
                  </header>
                  <div class="status" id="garage-status">
                      <h2>Garage Door Status</h2>
                      <p id="status-text">Checking status...</p>
                  </div>
                  <script>
                      async function checkGarageStatus() {
                          const response = await fetch('<API_GATEWAY_STATUS_URL>');
                          const data = await response.json();
                          const statusText = document.getElementById('status-text');
                          const statusDiv = document.getElementById('garage-status');

                          if (data.status === "on") {
                              statusText.textContent = "The garage door is open.";
                              statusDiv.classList.remove('closed');
                              statusDiv.classList.add('open');
                          } else {
                              statusText.textContent = "The garage door is closed.";
                              statusDiv.classList.remove('open');
                              statusDiv.classList.add('closed');
                          }
                      }
                      checkGarageStatus();
                      setInterval(checkGarageStatus, 5000);

                      if ('serviceWorker' in navigator) {
                          window.addEventListener('load', () => {
                              navigator.serviceWorker.register('data:application/javascript,${encodeURIComponent(`
                                  self.addEventListener('install', (event) => {
                                      console.log('Service worker installed');
                                  });

                                  self.addEventListener('fetch', (event) => {
                                      event.respondWith(
                                          caches.match(event.request).then((response) => {
                                              return response || fetch(event.request);
                                          })
                                      );
                                  });
                              `)}').then((registration) => {
                                  console.log('ServiceWorker registration successful with scope: ', registration.scope);
                              }, (error) => {
                                  console.log('ServiceWorker registration failed: ', error);
                              });
                          });
                      }
                  </script>
              </body>
              </html>
              """
              html_content = html_content.replace("<API_GATEWAY_STATUS_URL>", "https://${GarageGuardianApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/status")
              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'text/html'},
                  'body': html_content
              }

  GarageGuardianApiGatewayHTMLResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GarageGuardianApiGateway.RootResourceId
      PathPart: ''
      RestApiId: !Ref GarageGuardianApiGateway

  GarageGuardianApiGatewayHTMLMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref GarageGuardianApiGatewayHTMLResource
      RestApiId: !Ref GarageGuardianApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GarageGuardianHTMLLambda.Arn}/invocations"

  GarageGuardianHTMLLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GarageGuardianHTMLLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GarageGuardianApiGateway}/*/GET/"

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL to check garage door status
    Value: !Sub "https://${GarageGuardianApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/status"

  GarageGuardianSiteUrl:
    Description: URL for the Garage Guardian site
    Value: !Sub "https://${GarageGuardianApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"