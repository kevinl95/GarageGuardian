AWSTemplateFormatVersion: "2010-09-09"
Description: Garage Guardian - AWS CloudFormation Stack

Parameters:
  TuyaAPIKey:
    Type: String
    Description: The Tuya API Key
  TuyaAPISecret:
    Type: String
    Description: The Tuya API Secret
    NoEcho: true # Hides the API secret from logs and output
  TuyaDeviceID:
    Type: String
    Description: The Tuya Device ID to monitor
  TuyaDataCenter:
    Type: String
    Description: The Tuya Data Center
    AllowedValues:
      - China
      - WesternAmerica
      - EasternAmerica
      - CentralEurope
      - WesternEurope
      - India
    Default: WesternAmerica

Resources:
  GarageGuardianLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GarageGuardianLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GarageGuardianLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: arn:aws:dynamodb:*:*:table/GarageGuardianStatus
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: arn:aws:secretsmanager:*:*:secret:GarageGuardianCredentials-*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: arn:aws:lambda:*:*:function:GarageGuardianApiGatewayLambda

  GarageGuardianSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: GarageGuardianCredentials
      Description: Tuya API credentials for Garage Guardian
      SecretString: !Sub |
        {
          "apiKey": "${TuyaAPIKey}",
          "apiSecret": "${TuyaAPISecret}",
          "deviceId": "${TuyaDeviceID}",
          "dataCenter": "${TuyaDataCenter}"
        }

  GarageGuardianDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GarageGuardianStatus
      AttributeDefinitions:
        - AttributeName: DeviceID
          AttributeType: S
      KeySchema:
        - AttributeName: DeviceID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GarageGuardianApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GarageGuardianAPI

  GarageGuardianApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GarageGuardianApiGateway.RootResourceId
      PathPart: status
      RestApiId: !Ref GarageGuardianApiGateway

  GarageGuardianApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref GarageGuardianApiGatewayResource
      RestApiId: !Ref GarageGuardianApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GarageGuardianApiGatewayLambda.Arn}/invocations"

  GarageGuardianApiGatewayLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GarageGuardianApiGatewayHandler
      Runtime: python3.13
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt GarageGuardianLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('GarageGuardianStatus')

              # Retrieve the device ID from Secrets Manager
              secrets_client = boto3.client('secretsmanager')
              secret_name = "GarageGuardianCredentials"
              secret = secrets_client.get_secret_value(SecretId=secret_name)
              credentials = json.loads(secret['SecretString'])
              device_id = credentials['deviceId']

              try:
                  response = table.get_item(Key={'DeviceID': device_id})
                  status = response.get('Item', {}).get('LastKnownState', 'Unknown')
              except Exception as e:
                  print(f"Error querying DynamoDB: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({'error': 'Internal server error'})
                  }

              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'application/json'},
                  'body': json.dumps({'deviceId': device_id, 'status': status})
              }

  GarageGuardianApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GarageGuardianApiGatewayLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GarageGuardianApiGateway}/*/GET/status"

  GarageGuardianApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GarageGuardianApiGatewayMethod
    Properties:
      RestApiId: !Ref GarageGuardianApiGateway
      StageName: prod

  GarageGuardianLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GarageGuardianQuery
      Runtime: python3.13
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt GarageGuardianLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          import time
          import datetime
          import hashlib
          import hmac

          DATA_CENTER_URLS = {
              "China": "https://openapi.tuyacn.com",
              "WesternAmerica": "https://openapi.tuyaus.com",
              "EasternAmerica": "https://openapi-ueaz.tuyaus.com",
              "CentralEurope": "https://openapi.tuyaeu.com",
              "WesternEurope": "https://openapi-weaz.tuyaeu.com",
              "India": "https://openapi.tuyain.com"
          }

          def lambda_handler(event, context):
              secrets_client = boto3.client('secretsmanager')
              secret_name = "GarageGuardianCredentials"
              secret = secrets_client.get_secret_value(SecretId=secret_name)
              credentials = json.loads(secret['SecretString'])

              api_key = credentials['apiKey']
              api_secret = credentials['apiSecret']
              device_id = credentials['deviceId']
              data_center = credentials['dataCenter']

              base_url = f"{DATA_CENTER_URLS[data_center]}"

              # Step 1: Generate Token
              token_path = "/v1.0/token?grant_type=1"
              timestamp = str(int(time.time() * 1000))
              nonce = ""  # Optional, leave empty if not used
              method = "GET"
              content_sha256 = hashlib.sha256("".encode("utf-8")).hexdigest()
              # Construct the StringToSign
              string_to_sign = f"{method}\n{content_sha256}\n{nonce}\n{token_path}"
              sign = hmac.new(
                  api_secret.encode("utf-8"),
                  f"{api_key}{timestamp}{string_to_sign}".encode("utf-8"),
                  hashlib.sha256
              ).hexdigest().upper()

              token_headers = {
                  "client_id": api_key,
                  "sign": sign,
                  "t": timestamp,
                  "sign_method": "HMAC-SHA256",
              }

              http = urllib3.PoolManager()
              token_response = http.request("GET", base_url + token_path, headers=token_headers)
              token_data = json.loads(token_response.data.decode('utf-8'))

              if not token_data.get("success"):
                  raise Exception(f"Failed to generate token: {token_data.get('msg')}")

              access_token = token_data["result"]["access_token"]

              # Step 2: Query Device Status
              device_info_path = f"/v1.0/iot-03/devices/{device_id}"
              # Construct the StringToSign
              string_to_sign = f"{method}\n{content_sha256}\n{nonce}\n{device_info_path}"

              # Sign the StringToSign with the API secret
              sign = hmac.new(
                  api_secret.encode("utf-8"),
                  f"{api_key}{access_token}{timestamp}{string_to_sign}".encode("utf-8"),
                  hashlib.sha256
              ).hexdigest().upper()

              # Prepare the headers
              headers = {
                  "client_id": api_key,
                  "access_token": access_token,
                  "sign": sign,
                  "t": timestamp,
                  "sign_method": "HMAC-SHA256",
                  "Content-SHA256": content_sha256
              }

              # Make the API request
              response = http.request("GET", f"{base_url}{device_info_path}", headers=headers)
              response_data = json.loads(response.data.decode('utf-8'))
              if not response_data.get("success"):
                  raise Exception(f"API call failed: {response_data.get('msg')}")

              # Check the online status of the device
              is_online = response_data["result"]["online"]

              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('GarageGuardianStatus')

              # Fetch the current state
              current_state = table.get_item(Key={'DeviceID': device_id}).get('Item', {}).get('LastKnownState', 'closed')

              # Update the state based on the bulb status
              if is_online:
                  new_state = 'open' if current_state == 'closed' else 'closed'
              else:
                  new_state = current_state  # No state change when bulb is offline

              # Save the updated state
              table.put_item(
                  Item={
                      'DeviceID': device_id,
                      'LastKnownState': new_state,
                      'LastUpdated': datetime.datetime.utcnow().isoformat()
                  }
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps({'deviceId': device_id, 'garageState': new_state})
              }


  GarageGuardianEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      Targets:
        - Arn: !GetAtt GarageGuardianLambda.Arn
          Id: GarageGuardianLambdaTarget

  GarageGuardianLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GarageGuardianLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GarageGuardianEventBridgeRule.Arn

  GarageGuardianHTMLLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GarageGuardianHTMLHandler
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt GarageGuardianLambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          API_GATEWAY: !Sub "https://${GarageGuardianApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/status"
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              region = boto3.session.Session().region_name
              api_gateway_url = os.environ['API_GATEWAY']

              html_content = """
              <!DOCTYPE html>
              <html lang="en">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Garage Guardian</title>
                <link rel="icon" href="https://raw.githubusercontent.com/kevinl95/GarageGuardian/refs/heads/master/assets/favicon.ico" type="image/x-icon">
                <style>
                  body {
                    font-family: Arial, sans-serif;
                    text-align: center;
                    margin: 0;
                    padding: 0;
                    background-color: #f4f4f4;
                  }
                  header {
                    background: #333;
                    color: white;
                    padding: 20px 0;
                  }
                  .status {
                    margin-top: 50px;
                    padding: 20px;
                    background: white;
                    border-radius: 10px;
                    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                    display: inline-block;
                  }
                  .status h2 {
                    margin: 0;
                    font-size: 24px;
                    color: #333;
                  }
                  .status p {
                    font-size: 18px;
                    color: #666;
                  }
                  .status.open {
                    color: green;
                  }
                  .status.closed {
                    color: red;
                  }
                </style>
              </head>
              <body>
                <header>
                  <h1>Garage Guardian</h1>
                </header>
                <div class="status" id="garage-status">
                  <h2>Garage Door Status</h2>
                  <p id="status-text">Checking status...</p>
                </div>
                <script>
                  async function checkGarageStatus() {
                    const response = await fetch('<API_GATEWAY_STATUS_URL>');
                    const data = await response.json();
                    const statusText = document.getElementById('status-text');
                    const statusDiv = document.getElementById('garage-status');

                    if (data.status === "open") {
                      statusText.textContent = "The garage door is open.";
                      statusDiv.classList.remove('closed');
                      statusDiv.classList.add('open');
                    } else {
                      statusText.textContent = "The garage door is closed.";
                      statusDiv.classList.remove('open');
                      statusDiv.classList.add('closed');
                    }
                  }
                  checkGarageStatus();
                  setInterval(checkGarageStatus, 5000);
                </script>
              </body>
              </html>
              """
              html_content = html_content.replace('<API_GATEWAY_STATUS_URL>', api_gateway_url)
              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'text/html'},
                  'body': html_content
              }

  GarageGuardianApiGatewayHTMLResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GarageGuardianApiGateway.RootResourceId
      PathPart: html
      RestApiId: !Ref GarageGuardianApiGateway

  GarageGuardianApiGatewayHTMLMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref GarageGuardianApiGatewayHTMLResource
      RestApiId: !Ref GarageGuardianApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GarageGuardianHTMLLambda.Arn}/invocations"

  GarageGuardianHTMLLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GarageGuardianHTMLLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GarageGuardianApiGateway}/*/GET/html"

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL to check garage door status
    Value: !Sub "https://${GarageGuardianApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/status"

  GarageGuardianSiteUrl:
    Description: URL for the Garage Guardian site
    Value: !Sub "https://${GarageGuardianApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/html"